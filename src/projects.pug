include ./page.mixin.pug

link(rel="stylesheet" href="projects.css")

mixin project(name, href)
    - if (!href) href = name.toLowerCase()
    - if (href.indexOf("/") < 0) href = "https://github.com/isiahmeadows/" + href
    li
        +a(href).new= name
        div
            if /[\s^]npm[\s$]/.test(attributes.class || "")
                p.npm: +a("https://npmjs.com/package/" + name).new Find this on npm!
            block

mixin func(name)
    - var base = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/"
    +a(base + name.replace(/\./g, "/")).new= name

+page("Projects")
    div.
        Here's a list of projects I'm most active in, and things I feel most
        accomplished for:
    ul
        +project("This Website", "website")
            p.
                This website itself is fully open-source, ready to explore. I
                love open source! You can see a description of the technologies
                used to power this website there.

        +project("Thallium").npm
            p.
                An experimental JavaScript testing framework I'm currently
                working on that aims to be very unopinionated, simple to use,
                and easy to tailor to your needs, no matter how complicated they
                are. My goal is to make a testing framework that gets out of
                your way and lets you test how you want, instead of making you
                conform to its opinions on how your tests should be structured
                or go through extensive setup and/or boilerplate to start. I
                want something that is small and simple for the small and simple
                projects, but I want to still be able to have something very
                powerful and structured for large applications.

            p.
                After I finish the main implementation, I would really like to
                see about porting this to Python, with a few tweaks to better
                fit the language. I also plan on using this test framework in my
                own projects as it matures, even in production applications. For
                this reason, it is my primary project at the moment.

        +project("Mithril", "https://mithril.js.org").npm
            p.
                A lightweight, simple, and unopinionated
                #[+a("https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller").new MVC]
                framework created by #[+a("http://lhorie.blogspot.com").new Leo Horie].
                I am an active contributor, but my primary focus is on its
                performance, where this truly shines, and making it easier for
                people to contribute where they feel best. It's light enough and
                fast enough that it flies even on mobile, where there's little
                to no processing power. Matter of fact, several parts of this
                website are powered by Mithril â€’ most notably, the blog is itself a
                #[+a("https://github.com/isiahmeadows/website/blob/master/src/blog.js").new small Mithril web app].

        +project("simple-require-loader").npm
            p.
                A very simple, minimalistic, and flexible module loader that
                racks up a whopping 528 bytes minified and compressed. It
                supports many of the features you would expect of a larger,
                heavier module loader, including worker support, but in a
                fraction of the size. It is fully tested, and it has a very
                simple API.

            p.
                It does not provide any particular facilities for bundling, but
                it is possible to concatenate all your modules into a single
                script at the end. And unlike Webpack and similar, if you want
                to load a bundle remotely, there is a very simple API call to
                load those.

            p.
                It was created as an experiment to see how small I could create
                a functional, usable, module loader that could actually
                potentially scale beyond a small toy project. I myself don't
                actively use this yet, but I have already found others
                interested in it themselves.

        +project("m-iso")
            p.
                A deprecated attempt to port Mithril in its entirety to the
                server side with Node.js, with a very flexible rendering
                mechanism. Unlike most attempts to make Mithril interoperate
                with Node, this did not merely render HTML fragments, but entire
                web pages. It could print out modern HTML5, XML, legacy HTML and
                XHTML, and HTML5 Polyglot syntax as output formats, as well as
                any custom format you create a renderer for. I had also planned
                to implement the rest of Mithril's object model in this, but
                that proved to be too complex for the time I had available then.

            p.
                This project had not made it to 1.0, because
                #[+a("https://github.com/StephanHoyer/mithril-node-render").new Stephen Hoyer's mithril-node-render]
                was already fufilling a similar need and recent developments in
                Mithril core were already making it easier to add such support,
                especially with the recent core rewrite.
