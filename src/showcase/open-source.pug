include ../mixins/page.pug

mixin project(name)
    li
        .title
            - var href = "https://github.com/" + attributes.github
            a(href=attributes.href || href)= name
            a.logo(href=href)
                img(src="/images/github.png" alt="GitHub")

            if attributes.npm
                a.logo(href="https://npmjs.com/package/" + attributes.npm)
                    //- Capitalized so screen readers are more likely to read it
                    //- as initials
                    img(src="/images/npm.png" alt="NPM")
        .body
            block

+page("Showcase", "Open Source")
    div.
        Open source is a thing I love. I enjoy helping people get what they need
        done, in the most efficient way possible, and this even carries over
        into creating the tools for developers to succeed. Here's a list of the
        open source projects I'm most involved in, the ones I feel most
        accomplished for having taken part of:

    ul
        +project("This Website")(github="isiahmeadows/website")
            p.
                This website itself is fully open-source, ready to explore. I
                love open source! You can see a description of the technologies
                used to power this website there.

            p.
                The source code for it is a bit more complicated than you'd
                expect, because it not only features a custom experimental build
                system, but it also doubles as a simple static Markdown-based
                blog generator I'm constantly iterating on, and it features a
                development server that makes updating content and layout pretty
                easy.

        +project("Thallium")(github="isiahmeadows/thallium" npm="thallium")
            p.
                An experimental JavaScript testing framework I'm currently
                working on that aims to be very unopinionated, simple to use,
                and easy to tailor to your needs, no matter how complicated they
                are. My goal is to make a testing framework that gets out of
                your way and lets you test how you want, instead of making you
                conform to its opinions on how your tests should be structured
                or go through extensive setup and/or boilerplate to start. I
                want something that is small and simple for the small and simple
                projects, but I want to still be able to have something very
                powerful and structured for large applications.

        +project("Mithril")(
            href="https://mithril.js.org"
            github="MithrilJS/mithril.js"
            npm="mithril"
        )
            p.
                A lightweight, simple, and unopinionated front-end framework
                created by #[a(href="https://twitter.com/leohorie") Leo Horie].
                I am an active core contributor, but most of my work circles
                around performance (where this truly shines), stability, and
                making it easier for people to contribute where they feel best.
                It's light enough and fast enough that it flies even on mobile,
                where there's little to no processing power.

        +project("simple-require-loader")(
            github="isiahmeadows/simple-require-loader"
            npm="simple-require-loader"
        )
            p.
                A very simple, minimalistic, and flexible module loader that
                racks up a whopping 528 bytes minified and compressed. It
                supports many of the features you would expect of a larger,
                heavier module loader, including worker support and remote
                loading, but in a fraction of the size. It is fully tested, and
                it has a very simple API that should function on just about any
                browser you could potentially run it on, including old IE.

            p.
                It does not provide any particular facilities for bundling, but
                you could just concatenate all your modules into a single script
                at the end and call it a day. And unlike Webpack and similar,
                loading bundles remotely is pretty easy to do, and hot swapping
                modules is even easier.

            p.
                It was created as an experiment to see how small I could create
                a functional, usable, module loader that could actually
                potentially scale beyond a small toy project. I myself don't
                actively use this yet, but I've already had others tell me they
                were interested in it themselves.
