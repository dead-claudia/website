include ./page.mixin.jade

link(rel="stylesheet" href="projects.css")

mixin project(name, href, external)
    - if (!href) href = name.toLowerCase()
    - if (!external) href = "https://github.com/isiahmeadows/" + href
    li
        +a(href, true)= name
        div: block

mixin func(name)
    - var base = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/"
    +a(base + name.replace(/\./g, "/"), true)= name

+page("Projects")
    ul
        +project("This Website", "website").
            This website itself is fully open-source, ready to explore. I love
            open source!

        +project("Thallium")
            p.
                An experimental JavaScript testing framework I'm currently
                working on that aims to be very unopinionated, simple to use,
                and easy to tailor to your needs, no matter how complicated they
                are. My goal is to make a testing framework that gets out of
                your way and lets you test how you want, instead of making you
                conform to its opinions on how your tests should be structured
                or go through extensive setup and/or boilerplate to start. I
                want something that is small and simple for the small and simple
                projects, but I want to still be able to have something very
                powerful and structured for large applications.

            p.
                After I finish the main implementation, I would really like to
                see about porting this to Python, with a few tweaks to better
                fit the language. I also plan on using this test framework in my
                own projects as it matures, even in production applications. For
                this reason, it is my primary project at the moment.

        +project("Mithril", "https://mithril.js.org", true).
            A lightweight, simple, and unopinionated
            #[+a("https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller", true) MVC]
            framework created by #[+a("http://lhorie.blogspot.com", true) Leo Horie].
            I am an active contributor, but my primary focus is on its
            performance, where this truly shines. It's light enough and fast
            enough that it flies even on mobile, where there's not a lot of
            power. Matter of fact, this website even uses Mithril in places.

        +project("m-iso")
            p.
                A deprecated attempt to port Mithril in its entirety to the
                server side with Node.js, with a very flexible rendering
                mechanism. Unlike most attempts to make Mithril interoperate
                with Node, this did not merely render HTML fragments, but entire
                web pages. It could print out modern HTML5, XML, legacy HTML and
                XHTML, and HTML5 Polyglot syntax as output formats, as well as
                any custom format you create a renderer for. I had also planned
                to implement the rest of Mithril's object model in this, but
                that proved to be too complex for the time I had available then.

            p.
                This project had not made it to 1.0, but I am willing to
                resurrect this project if enough people are interested.

        +project("babel-plugin-proto-to-create").
            A plugin for Babel 5, a ECMAScript 6+ transpiler, to convert objects
            that contain a literal #[code __proto__] to use
            #[+func("Object.create")] and simple property assignment instead for
            regular properties and #[+func("Object.defineProperty")] to for
            getters and setters. I eventually want to update this for Babel 6.

        +project("ttyped").
            A simple runtime type-checking system for JavaScript via the
            #[+a("https://github.com/wycats/javascript-decorators", true) decorator proposal],
            #[+a("http://livescript.net", true) LiveScript], and
            #[+a("http://coffeescript.org", true) CoffeeScript], as a set of
            function decorators. It is currently powered by
            #[+a("http://npmjs.com/packages/type-check", true) type-check], but
            I have some very large changes to it slated for the next update,
            whenever I get it completed, including to the types themselves.
